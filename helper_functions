
# mnk_initialize
#
# Should be called at the beginning of every shell script.
#
# Exits your script if you try to use an uninitialised variable and exits your
# script as soon as any statement fails to prevent errors snowballing into
# serious issues.
#
# Example:
# mnk_initialize
#
#
function mnk_initialize {
  # Will exit script if we would use an uninitialised variable:
  set -o nounset
  # Will exit script when a simple command (not a control structure) fails:
  set -o errexit
}

# ---------
# mnk_CommandExists()
#
# ---------
# Check to see if a command exists. 
#
# Example:
#   mnk_CommandExists sudo 
#
mnk_CommandExists() {
  command -v "$@" >/dev/null 2>&1
}

# ---------
# mnk_UserCanSudo()
#
# ---------
# Check to see if user can sudo. 
#
# Example:
#   if mnk_UserCanSudo; then # do something, else do something else  
#
mnk_UserCanSudo() {
  # Check if sudo is installed
  mnk_CommandExists sudo || return 1
  # The following command has 3 parts:
  #
  # 1. Run `sudo` with `-v`. Does the following:
  #    • with privilege: asks for a password immediately.
  #    • without privilege: exits with error code 1 and prints the message:
  #      Sorry, user <username> may not run sudo on <hostname>
  #
  # 2. Pass `-n` to `sudo` to tell it to not ask for a password. If the
  #    password is not required, the command will finish with exit code 0.
  #    If one is required, sudo will exit with error code 1 and print the
  #    message:
  #    sudo: a password is required
  #
  # 3. Check for the words "may not run sudo" in the output to really tell
  #    whether the user has privileges or not. For that we have to make sure
  #    to run `sudo` in the default locale (with `LANG=`) so that the message
  #    stays consistent regardless of the user's locale.
  #
  ! LANG= sudo -n -v 2>&1 | grep -q "may not run sudo"
}

# ---------
# mnk_info()
#
# ---------
# Information to user. Blue color: Param 1 = text to echo 
#
# Example:
#   mnk_info "some text to echo" 
#
mnk_info()
{
    local inputText=$1
    local mycolor=blue
    #echo "echo from mnk_warning=$warning"
    mnk_echo "$inputText" "$mycolor"
}

# ---------
# mnk_warning()
#
# ---------
# Warning message. Magenta color: Param 1 = text to echo 
#
# Example:
#   mnk_warning "some warning text to echo" 
#
mnk_warning()
{
    local inputText=$1
    local mycolor=magenta
    #echo "echo from mnk_warning=$warning"
    mnk_echo "$inputText" "$mycolor"
}

# ---------
# mnk_error()
#
# ---------
# Show error to user. Red color: Param 1 = text to echo 
#
# Example:
#   mnk_error "some error text to echo" 
#
mnk_error()
{
    local inputText=$1
    local mycolor=red
    #echo "echo from mnk_warning=$warning"
    mnk_echo "$inputText" "$mycolor"
}


# mnk_fileExists file
#
# Makes sure that the given regular file exists. Thus, is not a directory or device file.
#
# Example:
# response=$(mnk_fileExists "file-to-be-check")
#    0 = false; else true
#
function mnk_fileExists {
    local file=${1}
    if [[ ! -f "${file}" ]]; then
        echo "1"
    else
        echo "0"
    fi
}

# mnk_fileDoesNotExists file
#
# Makes sure that the given file does not exist.
#
# Example:
# response=$(mnk_fileDoesNotExists "file-to-be-written-in-a-moment")
#    0 = false; else true
#
function mnk_fileDoesNotExists {
    local file=${1}
    if [[ -e "${file}" ]]; then
        echo "1"
    else
        echo "0"
    fi
}


# ---------
# mnk_continue()
#
# ---------
# Asks user a question where answer is either yes or no. Green color: Param 1 = question to ask 
#
# Returns user selection 
#
# Example:
#    response=$(mnk_continue)
#    echo "return value is = $response"
#
mnk_continue()
{
    RETVAL=
    question="`tput setaf 2`Do you want to continue? (y/n):`tput sgr0`"
    while true
    do
        read -r -p "$question" input
    
        case $input in
                [yY][eE][sS]|[yY])
                    # echo "Yes"
                    RETVAL='y'
                    break
                    ;;
                [nN][oO]|[nN])
                    # echo "No"
                    RETVAL='n'
                    break
                    ;;
                *)
                    echo "Invalid input..."
                    ;;
        esac      
    done
    echo $RETVAL
}

# ---------
# mnk_echo()
#
# ---------
# Write something to console in color: Param 1 = text to echo & Param 2 = color
#   :: choose from one the following colors
#       black=`tput setaf 0`
#       red=`tput setaf 1`
#       green=`tput setaf 2`
#       yellow=`tput setaf 3`
#       blue=`tput setaf 4`
#       magenta=`tput setaf 5`
#       cyan=`tput setaf 6`
#       white==`tput setaf 7`
#       bold=`tput bold`
#       underline=`tput smul`
#       faint=`tput dim`
#
# Example:
#   mnk_echo "some text to echo" blue
#
mnk_echo()
{
    lreset=`tput sgr0`
    whatToEcho=$1
    mycolor=$2
    finalEchoString=
    case $mycolor in
        black)
            echo "`tput setaf 0`$whatToEcho$lreset"
            ;;
        red)
            echo "`tput setaf 1`$whatToEcho$lreset"
            ;;
        green)
            echo "`tput setaf 2`$whatToEcho$lreset"
            ;;
        yellow)
            echo "`tput setaf 3`$whatToEcho$lreset"
            ;;
        blue)
            echo "`tput setaf 4`$whatToEcho$lreset"
            ;;
        magenta)
            echo "`tput setaf 5`$whatToEcho$lreset"
            ;;
        cyan)
            echo "`tput setaf 6`$whatToEcho$lreset"
            ;;
        white)
            echo "`tput setaf 7`$whatToEcho$lreset"
            ;;
        *)
            echo "$whatToEcho"
            ;;
    esac

}





